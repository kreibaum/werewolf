module Types.Auto exposing (..)


{- this file is generated by <https://github.com/choonkeat/elm-auto-encoder-decoder> do not modify manually -}


import Types exposing (..)
import Array
import Dict exposing (Dict)
import Json.Decode
import Json.Encode
import Platform
import Set exposing (Set)



-- HARDCODE


encodeString : String -> Json.Encode.Value
encodeString =
    Json.Encode.string


encodeInt : Int -> Json.Encode.Value
encodeInt =
    Json.Encode.int


encodeFloat : Float -> Json.Encode.Value
encodeFloat =
    Json.Encode.float


encodeBool : Bool -> Json.Encode.Value
encodeBool =
    Json.Encode.bool


encodeList : (a -> Json.Encode.Value) -> List a -> Json.Encode.Value
encodeList =
    Json.Encode.list


encodeArrayArray : (a -> Json.Encode.Value) -> Array.Array a -> Json.Encode.Value
encodeArrayArray =
    Json.Encode.array


encodeSetSet : (comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value
encodeSetSet encoder =
    Set.toList >> encodeList encoder


encodeDictDict : (a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> Dict.Dict a b -> Json.Encode.Value
encodeDictDict keyEncoder =
    Json.Encode.dict (\k -> Json.Encode.encode 0 (keyEncoder k))


encode_Unit : () -> Json.Encode.Value
encode_Unit value =
    Json.Encode.list identity [ encodeString "" ]


encodeJsonDecodeValue : Json.Decode.Value -> Json.Encode.Value
encodeJsonDecodeValue a =
    a


encodeJsonEncodeValue : Json.Encode.Value -> Json.Encode.Value
encodeJsonEncodeValue a =
    a



--


decodeJsonDecodeValue : Json.Decode.Decoder Json.Decode.Value
decodeJsonDecodeValue =
    Json.Decode.value


decodeJsonEncodeValue : Json.Decode.Decoder Json.Decode.Value
decodeJsonEncodeValue =
    Json.Decode.value


decodeString : Json.Decode.Decoder String
decodeString =
    Json.Decode.string


decodeInt : Json.Decode.Decoder Int
decodeInt =
    Json.Decode.int


decodeFloat : Json.Decode.Decoder Float
decodeFloat =
    Json.Decode.float


decodeBool : Json.Decode.Decoder Bool
decodeBool =
    Json.Decode.bool


decodeList : (Json.Decode.Decoder a) -> Json.Decode.Decoder (List a)
decodeList =
    Json.Decode.list


decodeArrayArray : (Json.Decode.Decoder a) -> Json.Decode.Decoder (Array.Array a)
decodeArrayArray =
    Json.Decode.array


decodeSetSet : (Json.Decode.Decoder comparable) -> Json.Decode.Decoder (Set.Set comparable)
decodeSetSet =
    Json.Decode.list >> Json.Decode.map Set.fromList


decodeDictDict : (Json.Decode.Decoder comparable) -> (Json.Decode.Decoder b) -> Json.Decode.Decoder (Dict.Dict comparable b)
decodeDictDict keyDecoder valueDecoder =
    Json.Decode.dict valueDecoder
        |> Json.Decode.map (\dict ->
            Dict.foldl (\string v acc ->
                case Json.Decode.decodeString keyDecoder string of
                    Ok k ->
                        Dict.insert k v acc
                    Err _ ->
                        acc
            ) Dict.empty dict
        )


decode_Unit : Json.Decode.Decoder ()
decode_Unit  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "" -> (Json.Decode.succeed ())
                    _ -> Json.Decode.fail ("Unexpected Unit: " ++ word)
            )


-- PRELUDE


{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Nothing") [],CustomTypeConstructor (TitleCaseDotPhrase "Just") [ConstructorTypeParam "a"]], name = TypeName "Maybe" ["a"] } -}
encodeMaybe : (a -> Json.Encode.Value) -> Maybe a -> Json.Encode.Value
encodeMaybe arga value =
    case value of
        (Nothing) -> (Json.Encode.list identity [ encodeString "Nothing" ])
        (Just m0) -> (Json.Encode.list identity [ encodeString "Just", (arga m0) ])



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Err") [ConstructorTypeParam "x"],CustomTypeConstructor (TitleCaseDotPhrase "Ok") [ConstructorTypeParam "a"]], name = TypeName "Result" ["x","a"] } -}
encodeResult : (x -> Json.Encode.Value) -> (a -> Json.Encode.Value) -> Result x a -> Json.Encode.Value
encodeResult argx arga value =
    case value of
        (Err m0) -> (Json.Encode.list identity [ encodeString "Err", (argx m0) ])
        (Ok m0) -> (Json.Encode.list identity [ encodeString "Ok", (arga m0) ])

{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Nothing") [],CustomTypeConstructor (TitleCaseDotPhrase "Just") [ConstructorTypeParam "a"]], name = TypeName "Maybe" ["a"] } -}
decodeMaybe : (Json.Decode.Decoder (a)) -> Json.Decode.Decoder (Maybe a)
decodeMaybe arga =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Nothing" -> (Json.Decode.succeed Nothing)
                    "Just" -> (Json.Decode.succeed Just |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (arga))))
                    _ -> Json.Decode.fail ("Unexpected Maybe: " ++ word)
            )
                 



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Err") [ConstructorTypeParam "x"],CustomTypeConstructor (TitleCaseDotPhrase "Ok") [ConstructorTypeParam "a"]], name = TypeName "Result" ["x","a"] } -}
decodeResult : (Json.Decode.Decoder (x)) -> (Json.Decode.Decoder (a)) -> Json.Decode.Decoder (Result x a)
decodeResult argx arga =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Err" -> (Json.Decode.succeed Err |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (argx))))
                    "Ok" -> (Json.Decode.succeed Ok |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (arga))))
                    _ -> Json.Decode.fail ("Unexpected Result: " ++ word)
            )
                 




{-| TypeAliasDef (AliasRecordType (TypeName "Types.CardInformation" []) [CustomField (FieldName "count") (CustomTypeConstructor (TitleCaseDotPhrase "Int") []),CustomField (FieldName "players") (CustomTypeConstructor (TitleCaseDotPhrase "Set.Set") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "targetPlayers") (CustomTypeConstructor (TitleCaseDotPhrase "Dict.Dict") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Set.Set") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]])]) -}
encodeTypesCardInformation : Types.CardInformation -> Json.Encode.Value
encodeTypesCardInformation value =
    Json.Encode.object
        [ ("count", (encodeInt) value.count)
        , ("players", (encodeSetSet (encodeString)) value.players)
        , ("targetPlayers", (encodeDictDict (encodeString) (encodeSetSet (encodeString))) value.targetPlayers)
        ]



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.Preparation") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Night") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Day") []], name = TypeName "Types.GamePhase" [] } -}
encodeTypesGamePhase : Types.GamePhase -> Json.Encode.Value
encodeTypesGamePhase value =
    case value of
        (Types.Preparation) -> (Json.Encode.list identity [ encodeString "Types.Preparation" ])
        (Types.Night) -> (Json.Encode.list identity [ encodeString "Types.Night" ])
        (Types.Day) -> (Json.Encode.list identity [ encodeString "Types.Day" ])



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Model" []) [CustomField (FieldName "roles") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Role") []]),CustomField (FieldName "customRoleNameRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "customRoleActionsRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "selected") (CustomTypeConstructor (TitleCaseDotPhrase "Dict.Dict") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.CardInformation") []]),CustomField (FieldName "players") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Player") []]),CustomField (FieldName "playersRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "openCard") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "openPlayer") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "phase") (CustomTypeConstructor (TitleCaseDotPhrase "Types.GamePhase") []),CustomField (FieldName "uiScale") (CustomTypeConstructor (TitleCaseDotPhrase "Int") [])]) -}
encodeTypesModel : Types.Model -> Json.Encode.Value
encodeTypesModel value =
    Json.Encode.object
        [ ("roles", (encodeList (encodeTypesRole)) value.roles)
        , ("customRoleNameRawText", (encodeString) value.customRoleNameRawText)
        , ("customRoleActionsRawText", (encodeString) value.customRoleActionsRawText)
        , ("selected", (encodeDictDict (encodeString) (encodeTypesCardInformation)) value.selected)
        , ("players", (encodeList (encodeTypesPlayer)) value.players)
        , ("playersRawText", (encodeString) value.playersRawText)
        , ("openCard", (encodeMaybe (encodeString)) value.openCard)
        , ("openPlayer", (encodeMaybe (encodeString)) value.openPlayer)
        , ("phase", (encodeTypesGamePhase) value.phase)
        , ("uiScale", (encodeInt) value.uiScale)
        ]



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.NoOp") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.AddRoleButtonClick") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemoveRoleButtonClick") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypePlayerNames") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.SelectCard") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.CloseCard") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.SelectPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.ClosePlayer") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.AssignPlayerToRole") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemovePlayerFromRole") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TargetPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemoveTargetPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.KillPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RevivePlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.SetPhase") [CustomTypeConstructor (TitleCaseDotPhrase "Types.GamePhase") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.IncreaseFontSize") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.DecreaseFontSize") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.UpdatePlayerNote") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Player") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypeCustomRoleName") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypeCustomRoleActions") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.AddRole") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Role") []]], name = TypeName "Types.Msg" [] } -}
encodeTypesMsg : Types.Msg -> Json.Encode.Value
encodeTypesMsg value =
    case value of
        (Types.NoOp) -> (Json.Encode.list identity [ encodeString "Types.NoOp" ])
        (Types.AddRoleButtonClick m0) -> (Json.Encode.list identity [ encodeString "Types.AddRoleButtonClick", (encodeString m0) ])
        (Types.RemoveRoleButtonClick m0) -> (Json.Encode.list identity [ encodeString "Types.RemoveRoleButtonClick", (encodeString m0) ])
        (Types.TypePlayerNames m0) -> (Json.Encode.list identity [ encodeString "Types.TypePlayerNames", (encodeString m0) ])
        (Types.SelectCard m0) -> (Json.Encode.list identity [ encodeString "Types.SelectCard", (encodeString m0) ])
        (Types.CloseCard) -> (Json.Encode.list identity [ encodeString "Types.CloseCard" ])
        (Types.SelectPlayer m0) -> (Json.Encode.list identity [ encodeString "Types.SelectPlayer", (encodeString m0) ])
        (Types.ClosePlayer) -> (Json.Encode.list identity [ encodeString "Types.ClosePlayer" ])
        (Types.AssignPlayerToRole m0 m1) -> (Json.Encode.list identity [ encodeString "Types.AssignPlayerToRole", (encodeString m0), (encodeString m1) ])
        (Types.RemovePlayerFromRole m0 m1) -> (Json.Encode.list identity [ encodeString "Types.RemovePlayerFromRole", (encodeString m0), (encodeString m1) ])
        (Types.TargetPlayer m0 m1 m2) -> (Json.Encode.list identity [ encodeString "Types.TargetPlayer", (encodeString m0), (encodeTypesRoleAction m1), (encodeString m2) ])
        (Types.RemoveTargetPlayer m0 m1 m2) -> (Json.Encode.list identity [ encodeString "Types.RemoveTargetPlayer", (encodeString m0), (encodeTypesRoleAction m1), (encodeString m2) ])
        (Types.KillPlayer m0) -> (Json.Encode.list identity [ encodeString "Types.KillPlayer", (encodeString m0) ])
        (Types.RevivePlayer m0) -> (Json.Encode.list identity [ encodeString "Types.RevivePlayer", (encodeString m0) ])
        (Types.SetPhase m0) -> (Json.Encode.list identity [ encodeString "Types.SetPhase", (encodeTypesGamePhase m0) ])
        (Types.IncreaseFontSize) -> (Json.Encode.list identity [ encodeString "Types.IncreaseFontSize" ])
        (Types.DecreaseFontSize) -> (Json.Encode.list identity [ encodeString "Types.DecreaseFontSize" ])
        (Types.UpdatePlayerNote m0) -> (Json.Encode.list identity [ encodeString "Types.UpdatePlayerNote", (encodeTypesPlayer m0) ])
        (Types.TypeCustomRoleName m0) -> (Json.Encode.list identity [ encodeString "Types.TypeCustomRoleName", (encodeString m0) ])
        (Types.TypeCustomRoleActions m0) -> (Json.Encode.list identity [ encodeString "Types.TypeCustomRoleActions", (encodeString m0) ])
        (Types.AddRole m0) -> (Json.Encode.list identity [ encodeString "Types.AddRole", (encodeTypesRole m0) ])



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.Alive") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Dead") []], name = TypeName "Types.Participation" [] } -}
encodeTypesParticipation : Types.Participation -> Json.Encode.Value
encodeTypesParticipation value =
    case value of
        (Types.Alive) -> (Json.Encode.list identity [ encodeString "Types.Alive" ])
        (Types.Dead) -> (Json.Encode.list identity [ encodeString "Types.Dead" ])



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Player" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "participation") (CustomTypeConstructor (TitleCaseDotPhrase "Types.Participation") []),CustomField (FieldName "note") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
encodeTypesPlayer : Types.Player -> Json.Encode.Value
encodeTypesPlayer value =
    Json.Encode.object
        [ ("name", (encodeString) value.name)
        , ("participation", (encodeTypesParticipation) value.participation)
        , ("note", (encodeString) value.note)
        ]



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Role" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "target") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleActionConfig") []])]) -}
encodeTypesRole : Types.Role -> Json.Encode.Value
encodeTypesRole value =
    Json.Encode.object
        [ ("name", (encodeString) value.name)
        , ("target", (encodeList (encodeTypesRoleActionConfig)) value.target)
        ]



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]], name = TypeName "Types.RoleAction" [] } -}
encodeTypesRoleAction : Types.RoleAction -> Json.Encode.Value
encodeTypesRoleAction value =
    case value of
        (Types.RoleAction m0) -> (Json.Encode.list identity [ encodeString "Types.RoleAction", (encodeString m0) ])



{-| TypeAliasDef (AliasRecordType (TypeName "Types.RoleActionConfig" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [])]) -}
encodeTypesRoleActionConfig : Types.RoleActionConfig -> Json.Encode.Value
encodeTypesRoleActionConfig value =
    Json.Encode.object
        [ ("name", (encodeTypesRoleAction) value.name)
        ]

{-| TypeAliasDef (AliasRecordType (TypeName "Types.CardInformation" []) [CustomField (FieldName "count") (CustomTypeConstructor (TitleCaseDotPhrase "Int") []),CustomField (FieldName "players") (CustomTypeConstructor (TitleCaseDotPhrase "Set.Set") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "targetPlayers") (CustomTypeConstructor (TitleCaseDotPhrase "Dict.Dict") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Set.Set") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]])]) -}
decodeTypesCardInformation : Json.Decode.Decoder (Types.CardInformation)
decodeTypesCardInformation  =
    Json.Decode.succeed Types.CardInformation
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "count" ] (decodeInt))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "players" ] (decodeSetSet (decodeString)))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "targetPlayers" ] (decodeDictDict (decodeString) (decodeSetSet (decodeString))))



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.Preparation") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Night") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Day") []], name = TypeName "Types.GamePhase" [] } -}
decodeTypesGamePhase : Json.Decode.Decoder (Types.GamePhase)
decodeTypesGamePhase  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Types.Preparation" -> (Json.Decode.succeed Types.Preparation)
                    "Types.Night" -> (Json.Decode.succeed Types.Night)
                    "Types.Day" -> (Json.Decode.succeed Types.Day)
                    _ -> Json.Decode.fail ("Unexpected Types.GamePhase: " ++ word)
            )
                 



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Model" []) [CustomField (FieldName "roles") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Role") []]),CustomField (FieldName "customRoleNameRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "customRoleActionsRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "selected") (CustomTypeConstructor (TitleCaseDotPhrase "Dict.Dict") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.CardInformation") []]),CustomField (FieldName "players") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Player") []]),CustomField (FieldName "playersRawText") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "openCard") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "openPlayer") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]),CustomField (FieldName "phase") (CustomTypeConstructor (TitleCaseDotPhrase "Types.GamePhase") []),CustomField (FieldName "uiScale") (CustomTypeConstructor (TitleCaseDotPhrase "Int") [])]) -}
decodeTypesModel : Json.Decode.Decoder (Types.Model)
decodeTypesModel  =
    Json.Decode.succeed Types.Model
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "roles" ] (decodeList (decodeTypesRole)))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "customRoleNameRawText" ] (decodeString))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "customRoleActionsRawText" ] (decodeString))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "selected" ] (decodeDictDict (decodeString) (decodeTypesCardInformation)))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "players" ] (decodeList (decodeTypesPlayer)))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "playersRawText" ] (decodeString))
        |> Json.Decode.map2 (|>) (Json.Decode.oneOf [Json.Decode.at [ "openCard" ] (decodeMaybe (decodeString)), Json.Decode.succeed Nothing])
        |> Json.Decode.map2 (|>) (Json.Decode.oneOf [Json.Decode.at [ "openPlayer" ] (decodeMaybe (decodeString)), Json.Decode.succeed Nothing])
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "phase" ] (decodeTypesGamePhase))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "uiScale" ] (decodeInt))



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.NoOp") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.AddRoleButtonClick") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemoveRoleButtonClick") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypePlayerNames") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.SelectCard") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.CloseCard") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.SelectPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.ClosePlayer") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.AssignPlayerToRole") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemovePlayerFromRole") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TargetPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RemoveTargetPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [],CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.KillPlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.RevivePlayer") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.SetPhase") [CustomTypeConstructor (TitleCaseDotPhrase "Types.GamePhase") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.IncreaseFontSize") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.DecreaseFontSize") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.UpdatePlayerNote") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Player") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypeCustomRoleName") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.TypeCustomRoleActions") [CustomTypeConstructor (TitleCaseDotPhrase "String") []],CustomTypeConstructor (TitleCaseDotPhrase "Types.AddRole") [CustomTypeConstructor (TitleCaseDotPhrase "Types.Role") []]], name = TypeName "Types.Msg" [] } -}
decodeTypesMsg : Json.Decode.Decoder (Types.Msg)
decodeTypesMsg  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Types.NoOp" -> (Json.Decode.succeed Types.NoOp)
                    "Types.AddRoleButtonClick" -> (Json.Decode.succeed Types.AddRoleButtonClick |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.RemoveRoleButtonClick" -> (Json.Decode.succeed Types.RemoveRoleButtonClick |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.TypePlayerNames" -> (Json.Decode.succeed Types.TypePlayerNames |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.SelectCard" -> (Json.Decode.succeed Types.SelectCard |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.CloseCard" -> (Json.Decode.succeed Types.CloseCard)
                    "Types.SelectPlayer" -> (Json.Decode.succeed Types.SelectPlayer |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.ClosePlayer" -> (Json.Decode.succeed Types.ClosePlayer)
                    "Types.AssignPlayerToRole" -> (Json.Decode.succeed Types.AssignPlayerToRole |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))) |> (Json.Decode.map2 (|>) (Json.Decode.index 2 (decodeString))))
                    "Types.RemovePlayerFromRole" -> (Json.Decode.succeed Types.RemovePlayerFromRole |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))) |> (Json.Decode.map2 (|>) (Json.Decode.index 2 (decodeString))))
                    "Types.TargetPlayer" -> (Json.Decode.succeed Types.TargetPlayer |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))) |> (Json.Decode.map2 (|>) (Json.Decode.index 2 (decodeTypesRoleAction))) |> (Json.Decode.map2 (|>) (Json.Decode.index 3 (decodeString))))
                    "Types.RemoveTargetPlayer" -> (Json.Decode.succeed Types.RemoveTargetPlayer |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))) |> (Json.Decode.map2 (|>) (Json.Decode.index 2 (decodeTypesRoleAction))) |> (Json.Decode.map2 (|>) (Json.Decode.index 3 (decodeString))))
                    "Types.KillPlayer" -> (Json.Decode.succeed Types.KillPlayer |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.RevivePlayer" -> (Json.Decode.succeed Types.RevivePlayer |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.SetPhase" -> (Json.Decode.succeed Types.SetPhase |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeTypesGamePhase))))
                    "Types.IncreaseFontSize" -> (Json.Decode.succeed Types.IncreaseFontSize)
                    "Types.DecreaseFontSize" -> (Json.Decode.succeed Types.DecreaseFontSize)
                    "Types.UpdatePlayerNote" -> (Json.Decode.succeed Types.UpdatePlayerNote |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeTypesPlayer))))
                    "Types.TypeCustomRoleName" -> (Json.Decode.succeed Types.TypeCustomRoleName |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.TypeCustomRoleActions" -> (Json.Decode.succeed Types.TypeCustomRoleActions |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    "Types.AddRole" -> (Json.Decode.succeed Types.AddRole |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeTypesRole))))
                    _ -> Json.Decode.fail ("Unexpected Types.Msg: " ++ word)
            )
                 



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.Alive") [],CustomTypeConstructor (TitleCaseDotPhrase "Types.Dead") []], name = TypeName "Types.Participation" [] } -}
decodeTypesParticipation : Json.Decode.Decoder (Types.Participation)
decodeTypesParticipation  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Types.Alive" -> (Json.Decode.succeed Types.Alive)
                    "Types.Dead" -> (Json.Decode.succeed Types.Dead)
                    _ -> Json.Decode.fail ("Unexpected Types.Participation: " ++ word)
            )
                 



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Player" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "participation") (CustomTypeConstructor (TitleCaseDotPhrase "Types.Participation") []),CustomField (FieldName "note") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
decodeTypesPlayer : Json.Decode.Decoder (Types.Player)
decodeTypesPlayer  =
    Json.Decode.succeed Types.Player
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "name" ] (decodeString))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "participation" ] (decodeTypesParticipation))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "note" ] (decodeString))



{-| TypeAliasDef (AliasRecordType (TypeName "Types.Role" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") []),CustomField (FieldName "target") (CustomTypeConstructor (TitleCaseDotPhrase "List") [CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleActionConfig") []])]) -}
decodeTypesRole : Json.Decode.Decoder (Types.Role)
decodeTypesRole  =
    Json.Decode.succeed Types.Role
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "name" ] (decodeString))
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "target" ] (decodeList (decodeTypesRoleActionConfig)))



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]], name = TypeName "Types.RoleAction" [] } -}
decodeTypesRoleAction : Json.Decode.Decoder (Types.RoleAction)
decodeTypesRoleAction  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Types.RoleAction" -> (Json.Decode.succeed Types.RoleAction |> (Json.Decode.map2 (|>) (Json.Decode.index 1 (decodeString))))
                    _ -> Json.Decode.fail ("Unexpected Types.RoleAction: " ++ word)
            )
                 



{-| TypeAliasDef (AliasRecordType (TypeName "Types.RoleActionConfig" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "Types.RoleAction") [])]) -}
decodeTypesRoleActionConfig : Json.Decode.Decoder (Types.RoleActionConfig)
decodeTypesRoleActionConfig  =
    Json.Decode.succeed Types.RoleActionConfig
        |> Json.Decode.map2 (|>) (Json.Decode.at [ "name" ] (decodeTypesRoleAction))